{"mappings":"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","sources":["./packages/@react-stately/tooltip/src/useTooltipTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {useEffect, useMemo, useRef} from 'react';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\n\nconst TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\nconst TOOLTIP_COOLDOWN = 500;\n\nexport interface TooltipTriggerState {\n  /** Whether the tooltip is currently showing. */\n  isOpen: boolean,\n  /**\n   * Shows the tooltip. By default, the tooltip becomes visible after a delay\n   * depending on a global warmup timer. The `immediate` option shows the\n   * tooltip immediately instead.\n   */\n  open(immediate?: boolean): void,\n  /** Hides the tooltip. */\n  close(immediate?: boolean): void\n}\n\nlet tooltips = {};\nlet tooltipId = 0;\nlet globalWarmedUp = false;\nlet globalWarmUpTimeout = null;\nlet globalCooldownTimeout = null;\n\n/**\n * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides\n * methods to toggle this state. Ensures only one tooltip is open at a time and controls\n * the delay for showing a tooltip.\n */\nexport function useTooltipTriggerState(props: TooltipTriggerProps = {}): TooltipTriggerState {\n  let {delay = TOOLTIP_DELAY} = props;\n  let {isOpen, open, close} = useOverlayTriggerState(props);\n  let id = useMemo(() => `${++tooltipId}`, []);\n  let closeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  let ensureTooltipEntry = () => {\n    tooltips[id] = hideTooltip;\n  };\n\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in tooltips) {\n      if (hideTooltipId !== id) {\n        tooltips[hideTooltipId](true);\n        delete tooltips[hideTooltipId];\n      }\n    }\n  };\n\n  let showTooltip = () => {\n    clearTimeout(closeTimeout.current);\n    closeTimeout.current = null;\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    globalWarmedUp = true;\n    open();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalCooldownTimeout) {\n      clearTimeout(globalCooldownTimeout);\n      globalCooldownTimeout = null;\n    }\n  };\n\n  let hideTooltip = (immediate?: boolean) => {\n    if (immediate) {\n      clearTimeout(closeTimeout.current);\n      closeTimeout.current = null;\n      close();\n    } else if (!closeTimeout.current) {\n      closeTimeout.current = setTimeout(() => {\n        closeTimeout.current = null;\n        close();\n      }, TOOLTIP_COOLDOWN);\n    }\n\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalWarmedUp) {\n      if (globalCooldownTimeout) {\n        clearTimeout(globalCooldownTimeout);\n      }\n      globalCooldownTimeout = setTimeout(() => {\n        delete tooltips[id];\n        globalCooldownTimeout = null;\n        globalWarmedUp = false;\n      }, TOOLTIP_COOLDOWN);\n    }\n  };\n\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    if (!isOpen && !globalWarmUpTimeout && !globalWarmedUp) {\n      globalWarmUpTimeout = setTimeout(() => {\n        globalWarmUpTimeout = null;\n        globalWarmedUp = true;\n        showTooltip();\n      }, delay);\n    } else if (!isOpen) {\n      showTooltip();\n    }\n  };\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      clearTimeout(closeTimeout.current);\n      let tooltip = tooltips[id];\n      if (tooltip) {\n        delete tooltips[id];\n      }\n    };\n  }, [id]);\n\n  return {\n    isOpen,\n    open: (immediate) => {\n      if (!immediate && delay > 0 && !closeTimeout.current) {\n        warmupTooltip();\n      } else {\n        showTooltip();\n      }\n    },\n    close: hideTooltip\n  };\n}\n"],"names":["TOOLTIP_DELAY","TOOLTIP_COOLDOWN","tooltips","tooltipId","globalWarmedUp","globalWarmUpTimeout","globalCooldownTimeout","useTooltipTriggerState","props","delay","isOpen","open","close","useOverlayTriggerState","id","useMemo","closeTimeout","useRef","ensureTooltipEntry","hideTooltip","closeOpenTooltips","hideTooltipId","showTooltip","clearTimeout","current","immediate","setTimeout","warmupTooltip","useEffect","tooltip"],"version":3,"file":"module.js.map"}