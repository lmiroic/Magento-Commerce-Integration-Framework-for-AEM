{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/button/src/useButton.ts","./packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let buttonProps = mergeProps(focusableProps, pressProps);\n  buttonProps = mergeProps(buttonProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<HTMLElement>): ButtonAria<HTMLAttributes<HTMLElement>>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useButton","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","onClick","deprecatedOnClick","href","target","rel","type","additionalProps","disabled","role","tabIndex","undefined","pressProps","isPressed","usePress","focusableProps","useFocusable","buttonProps","mergeProps","filterDOMProps","labelable","e","console","warn","useToggleButton","state","isSelected","chain","toggle"],"version":3,"file":"main.js.map"}