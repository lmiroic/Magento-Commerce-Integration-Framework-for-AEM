{"mappings":"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","sources":["./packages/@react-aria/tooltip/src/useTooltip.ts","./packages/@react-aria/tooltip/src/useTooltipTrigger.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTooltipProps} from '@react-types/tooltip';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TooltipAria {\n  /**\n   * Props for the tooltip element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the accessibility implementation for a Tooltip component.\n */\nexport function useTooltip(props: AriaTooltipProps, state?: TooltipTriggerState): TooltipAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  let {hoverProps} = useHover({\n    onHoverStart: () => state?.open(true),\n    onHoverEnd: () => state?.close()\n  });\n\n  return {\n    tooltipProps: mergeProps(domProps, hoverProps, {\n      role: 'tooltip'\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvents} from '@react-types/shared';\nimport {getInteractionModality, HoverProps, isFocusVisible, PressProps, usePress} from '@react-aria/interactions';\nimport {HTMLAttributes, RefObject, useEffect, useRef} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipTriggerState} from '@react-stately/tooltip';\nimport {useFocusable} from '@react-aria/focus';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TooltipTriggerAria {\n  /**\n   * Props for the trigger element.\n   */\n  triggerProps: HTMLAttributes<HTMLElement> & PressProps & HoverProps & FocusEvents,\n\n  /**\n   * Props for the overlay container element.\n   */\n  tooltipProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tooltip trigger, e.g. a button\n * that shows a description when focused or hovered.\n */\nexport function useTooltipTrigger(props: TooltipTriggerProps, state: TooltipTriggerState, ref: RefObject<HTMLElement>) : TooltipTriggerAria {\n  let {\n    isDisabled,\n    trigger\n  } = props;\n\n  let tooltipId = useId();\n\n  let isHovered = useRef(false);\n  let isFocused = useRef(false);\n\n  let handleShow = () => {\n    if (isHovered.current || isFocused.current) {\n      state.open(isFocused.current);\n    }\n  };\n\n  let handleHide = (immediate?: boolean) => {\n    if (!isHovered.current && !isFocused.current) {\n      state.close(immediate);\n    }\n  };\n\n  useEffect(() => {\n    let onKeyDown = (e) => {\n      if (ref && ref.current) {\n        // Escape after clicking something can give it keyboard focus\n        // dismiss tooltip on esc key press\n        if (e.key === 'Escape') {\n          state.close(true);\n        }\n      }\n    };\n    if (state.isOpen) {\n      document.addEventListener('keydown', onKeyDown, true);\n      return () => {\n        document.removeEventListener('keydown', onKeyDown, true);\n      };\n    }\n  }, [ref, state]);\n\n  let onHoverStart = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // In chrome, if you hover a trigger, then another element obscures it, due to keyboard\n    // interactions for example, hover will end. When hover is restored after that element disappears,\n    // focus moves on for example, then the tooltip will reopen. We check the modality to know if the hover\n    // is the result of moving the mouse.\n    if (getInteractionModality() === 'pointer') {\n      isHovered.current = true;\n    } else {\n      isHovered.current = false;\n    }\n    handleShow();\n  };\n\n  let onHoverEnd = () => {\n    if (trigger === 'focus') {\n      return;\n    }\n    // no matter how the trigger is left, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide();\n  };\n\n  let onPressStart = () => {\n    // no matter how the trigger is pressed, we should close the tooltip\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let onFocus = () => {\n    let isVisible = isFocusVisible();\n    if (isVisible) {\n      isFocused.current = true;\n      handleShow();\n    }\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n    isHovered.current = false;\n    handleHide(true);\n  };\n\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart,\n    onHoverEnd\n  });\n\n  let {pressProps} = usePress({onPressStart});\n\n  let {focusableProps} = useFocusable({\n    isDisabled,\n    onFocus,\n    onBlur\n  }, ref);\n\n  return {\n    triggerProps: {\n      'aria-describedby': state.isOpen ? tooltipId : undefined,\n      ...mergeProps(focusableProps, hoverProps, pressProps)\n    },\n    tooltipProps: {\n      id: tooltipId\n    }\n  };\n}\n"],"names":["useTooltip","props","state","domProps","filterDOMProps","labelable","hoverProps","useHover","onHoverStart","open","onHoverEnd","close","tooltipProps","mergeProps","role","useTooltipTrigger","ref","isDisabled","trigger","tooltipId","useId","isHovered","useRef","isFocused","handleShow","current","handleHide","immediate","useEffect","onKeyDown","e","key","isOpen","document","addEventListener","removeEventListener","getInteractionModality","onPressStart","onFocus","isVisible","isFocusVisible","onBlur","pressProps","usePress","focusableProps","useFocusable","triggerProps","undefined","id"],"version":3,"file":"module.js.map"}